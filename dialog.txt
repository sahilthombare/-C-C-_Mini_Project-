// Practise1Dlg.cpp : implementation file
//
#include <vector>  // Include this at the top of your file to use std::vector

#include "pch.h"
#include "framework.h"
#include "Practise1.h"
#include "Practise1Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CAboutDlg dialog used for App About

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

	// Dialog Data
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support

	// Implementation
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CPractise1Dlg dialog

CPractise1Dlg::CPractise1Dlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_PRACTISE1_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CPractise1Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_EDIT_BOX, m_editbox);
	DDX_Control(pDX, IDC_LIST1, m_listbox);
	DDX_Control(pDX, IDC_COMBO1, m_combobox);
	DDX_Control(pDX, IDC_TREE1, m_tree);
}

BEGIN_MESSAGE_MAP(CPractise1Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(ID_ADD, &CPractise1Dlg::OnBnClickedAdd)
	
	ON_LBN_SELCHANGE(IDC_LIST1, &CPractise1Dlg::OnLbnSelchangeList)
	ON_CBN_SELCHANGE(IDC_COMBO1, &CPractise1Dlg::OnCbnSelchangeCombo)
	ON_NOTIFY(TVN_SELCHANGED, IDC_TREE1, &CPractise1Dlg::OnTvnSelchangedTree)

	// change if required
	ON_NOTIFY(NM_CUSTOMDRAW, IDC_TREE1, &CPractise1Dlg::OnCustomDrawTree)

	ON_BN_CLICKED(ID_DEL, &CPractise1Dlg::OnBnClickedDel)
END_MESSAGE_MAP()


// CPractise1Dlg message handlers

BOOL CPractise1Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// Initialize the tree control
	m_tree.DeleteAllItems();
	m_ImageList.Create(16, 16, ILC_COLOR32, 1, 1);
	HICON hIcon = AfxGetApp()->LoadIcon(IDI_ICON1);
	m_ImageList.Add(hIcon);
	m_tree.SetImageList(&m_ImageList, TVSIL_NORMAL);


	// Add "About..." menu item to system menu.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	m_tree.ModifyStyle(0, TVS_SHOWSELALWAYS);

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon

	// TODO: Add extra initialization here

	return TRUE;  // return TRUE  unless you set the focus to a control
}


void CPractise1Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

void CPractise1Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

HCURSOR CPractise1Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CPractise1Dlg::OnBnClickedAdd()
{
	// Get the string from the edit box
	CString str;
	m_editbox.GetWindowText(str);

	if (str.IsEmpty()) {
		// Do not add an empty string
		return;
	}

	// Add the string to the list box and combo box
	m_listbox.AddString(str);
	m_combobox.AddString(str);
	m_editbox.SetWindowText(_T(""));

	HTREEITEM hRootItem = m_tree.GetRootItem();
	HTREEITEM hLastItem = nullptr;

	if (hRootItem == nullptr)
	{
		// If there's no root item, add the first string as the root
		hLastItem = m_tree.InsertItem(str, TVI_ROOT, TVI_LAST);
	}
	else
	{
		// Find the last item in the chain
		HTREEITEM hItem = hRootItem;
		while (m_tree.GetChildItem(hItem) != nullptr)
		{
			hItem = m_tree.GetChildItem(hItem);
		}

		// Add the new string as the child of the last item
		hLastItem = m_tree.InsertItem(str, hItem, TVI_LAST);
		m_tree.Expand(hItem, TVE_EXPAND); // Expand the parent item
	}

	// Ensure the new item is visible
	m_tree.EnsureVisible(hLastItem);
}

// Handler for list box selection change
void CPractise1Dlg::OnLbnSelchangeList()
{
	int nSel = m_listbox.GetCurSel();
	if (nSel != LB_ERR)
	{
		CString str;
		m_listbox.GetText(nSel, str);
		SelectStringInControls(str);
	}
}

// Handler for combo box selection change
void CPractise1Dlg::OnCbnSelchangeCombo()
{
	int nSel = m_combobox.GetCurSel();
	if (nSel != CB_ERR)
	{
		CString str;
		m_combobox.GetLBText(nSel, str);
		SelectStringInControls(str);
	}
}

// Handler for tree control selection change
void CPractise1Dlg::OnTvnSelchangedTree(NMHDR* pNMHDR, LRESULT* pResult)
{
	LPNMTREEVIEW pNMTreeView = reinterpret_cast<LPNMTREEVIEW>(pNMHDR);

	HTREEITEM hSelectedItem = m_tree.GetSelectedItem();
	if (hSelectedItem != nullptr)
	{
		CString str = m_tree.GetItemText(hSelectedItem);
		SelectStringInControls(str);
	}

	*pResult = 0;
}

void CPractise1Dlg::SelectStringInControls(const CString& str)
{
	// Select the string in the list box
	int nListIndex = m_listbox.FindStringExact(-1, str);
	if (nListIndex != LB_ERR)
	{
		m_listbox.SetCurSel(nListIndex);
	}

	// Select the string in the combo box
	int nComboIndex = m_combobox.FindStringExact(-1, str);
	if (nComboIndex != CB_ERR)
	{
		m_combobox.SetCurSel(nComboIndex);
	}

	// Select the string in the tree control
	HTREEITEM hItem = m_tree.GetRootItem();
	if (hItem != nullptr)
	{
		hItem = FindTreeItem(hItem, str);
		if (hItem != nullptr)
		{
			m_tree.SelectItem(hItem);
			m_tree.EnsureVisible(hItem);
		}
	}

	// Set the string in the edit box
	m_editbox.SetWindowText(str);
}

HTREEITEM CPractise1Dlg::FindTreeItem(HTREEITEM hItem, const CString& str)
{
	while (hItem != nullptr)
	{
		if (m_tree.GetItemText(hItem) == str)
		{
			return hItem;
		}

		// Recursively search for the item in child nodes
		HTREEITEM hChildItem = m_tree.GetChildItem(hItem);
		HTREEITEM hFoundItem = FindTreeItem(hChildItem, str);
		if (hFoundItem != nullptr)
		{
			return hFoundItem;
		}

		hItem = m_tree.GetNextItem(hItem, TVGN_NEXT);
	}
	return nullptr;
}


void CPractise1Dlg::OnCustomDrawTree(NMHDR* pNMHDR, LRESULT* pResult)
{
	LPNMTVCUSTOMDRAW pNMCD = reinterpret_cast<LPNMTVCUSTOMDRAW>(pNMHDR);

	switch (pNMCD->nmcd.dwDrawStage)
	{
	case CDDS_PREPAINT:
		*pResult = CDRF_NOTIFYITEMDRAW; // Request item-specific notifications.
		return;

	case CDDS_ITEMPREPAINT:
	{
		// Get the tree item
		HTREEITEM hItem = (HTREEITEM)pNMCD->nmcd.dwItemSpec;

		// Check if the item is selected
		if (m_tree.GetSelectedItem() == hItem)
		{
			// Set the text color
			pNMCD->clrText = RGB(255, 255, 255); // White text

			// Set the background color for selected item
			pNMCD->clrTextBk = RGB(0, 0, 255); // Dark blue background
		}
		else
		{
			// Set the default text and background colors
			pNMCD->clrText = RGB(0, 0, 0); // Black text
			pNMCD->clrTextBk = RGB(255, 255, 255); // White background
		}

		*pResult = CDRF_DODEFAULT;
		return;
	}
	}

	*pResult = 0;
}


void CPractise1Dlg::OnBnClickedDel()
{
	// Get the selected item in the tree control
	HTREEITEM hSelectedItem = m_tree.GetSelectedItem();
	if (hSelectedItem == nullptr)
	{
		// No item is selected
		return;
	}

	// Get the text of the selected item (to delete from list box and combo box later)
	CString strToDelete = m_tree.GetItemText(hSelectedItem);

	// Get the parent item of the selected item
	HTREEITEM hParentItem = m_tree.GetParentItem(hSelectedItem);

	// Vector to store all descendants of the selected item
	std::vector<CString> descendantStrings;

	// Collect all descendant strings of the selected item
	CollectDescendantStrings(hSelectedItem, descendantStrings);

	// Remove the selected item from the tree control
	m_tree.DeleteItem(hSelectedItem);

	// If there's a parent and descendants, reattach them
	if (hParentItem != nullptr && !descendantStrings.empty())
	{
		// Add the first descendant as the child of the parent of the deleted node
		HTREEITEM hNewChild = m_tree.InsertItem(descendantStrings[0], hParentItem, TVI_LAST);

		// Reattach the rest of the descendants in a single-child chain
		HTREEITEM hCurrentItem = hNewChild;
		for (size_t i = 1; i < descendantStrings.size(); ++i)
		{
			hCurrentItem = m_tree.InsertItem(descendantStrings[i], hCurrentItem, TVI_LAST);
		}
	}

	// Remove the selected string from the list box
	int nListIndex = m_listbox.FindStringExact(-1, strToDelete);
	if (nListIndex != LB_ERR)
	{
		m_listbox.DeleteString(nListIndex);
	}

	// Remove the selected string from the combo box
	int nComboIndex = m_combobox.FindStringExact(-1, strToDelete);
	if (nComboIndex != CB_ERR)
	{
		m_combobox.DeleteString(nComboIndex);
	}

	// Clear the edit box
	m_editbox.SetWindowText(_T(""));
}


void CPractise1Dlg::CollectDescendantStrings(HTREEITEM hItem, std::vector<CString>& descendantStrings)
{
	// Traverse all children of the given item and collect their strings
	HTREEITEM hChildItem = m_tree.GetChildItem(hItem);
	while (hChildItem != nullptr)
	{
		// Store the text of the current child item
		descendantStrings.push_back(m_tree.GetItemText(hChildItem));

		// Recursively collect strings of this child's descendants
		CollectDescendantStrings(hChildItem, descendantStrings);

		// Move to the next sibling
		hChildItem = m_tree.GetNextItem(hChildItem, TVGN_NEXT);
	}
}